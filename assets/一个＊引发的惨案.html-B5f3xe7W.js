import{_ as e,c as s,d as a,o as t}from"./app-BQ4V10fd.js";const n={};function h(p,i){return t(),s("div",null,i[0]||(i[0]=[a(`<hr><h1 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h1><p>最近，我正在部署我自己的博客，因为使用的是obsidian，所以为了过滤隐私文件/转换wiki链接，我自己写了个Python程序来转换。</p><p>因为使用的Vuepress需要把图片文件放在Public文件夹下面，所以还写了个程序，用来把图片文件转移到<code>.vuepress/public</code>文件夹下。</p><p>本地运行，很完美，效果都实现了。要不部署看看吧。然后，<code>.vuepress</code>就不知道去哪了</p><h1 id="开始debug——怀疑linux的问题" tabindex="-1"><a class="header-anchor" href="#开始debug——怀疑linux的问题"><span>开始Debug——怀疑Linux的问题</span></a></h1><p>介于以前就因为Github Action就出现过因Linux的路径问题导致的BUG，所以先给所有的路径都加上一个<code>os.path.normpath</code>，希望能实现。</p><p>本地跑，完美。放到Action，还是不在。加一个ls，也找不到。</p><h1 id="怀疑python的问题" tabindex="-1"><a class="header-anchor" href="#怀疑python的问题"><span>怀疑Python的问题</span></a></h1><p>因为我的file_move写的很抽象，是这样写的:</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path1) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">path1.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">unlink</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path2) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    f.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(content)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为一些莫名其妙的路径问题，所以只能用这种浪费IO性能的方式。<br> 然后用Pycharm的debug调试了半天，还是改回了一般的移动方式</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shutil.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(path1,path2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>本地运行，还是完美。但是Github Action还是跑不出来。<br> 此时，因为长时间的调试，已经刷了10多个Commit，也红温了</p><h1 id="初露端倪" tabindex="-1"><a class="header-anchor" href="#初露端倪"><span>初露端倪</span></a></h1><p>既然还是路径的问题，那就加ls吧，狠狠的加。<br> 不过没用。</p><p>但是为什么不试试在Python内ls一下呢（？<br> 直接叫出copilot写一个递归打印。<br> Amazing! 文件已经处理好了！都在处理好的文件夹安安静静的躺着呢。<br> 但是目标文件夹依然找不到，Push后的仓库也找不到。</p><h1 id="找到原因" tabindex="-1"><a class="header-anchor" href="#找到原因"><span>找到原因</span></a></h1><p>经过一系列对ls，最终锁定到了一条语句上:</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> obsidian_data/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> wait_publish_data/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>看起来很正常，对吧？把obsidian_data内的所有文件移动到wait_publish_data。<br> 但是，在两侧中，都是正常的。能处理文件的也只有这一条语句了。<br> 随后就开始怀疑，怀疑<code>*</code>是否正常。立刻询问Github Copilot网页版（不得不说是真好用）<br> 得到结论:</p><blockquote><p><code>/*</code>选中的是所有的文件，但是不包括隐藏文件和文件夹，例如<code>.git</code>和<code>.vuepress</code>，如果要选择的话，请使用<code>/.</code>以选择所有的文件</p></blockquote><p>好，问题成功解决，只因为一个*。<br> 但是代价呢？</p><p>红温了3小时</p>`,24)]))}const r=e(n,[["render",h]]),d=JSON.parse('{"path":"/40%20Archive/%E5%8D%9A%E5%AE%A2/%E8%AE%A1%E7%AE%97%E6%9C%BA/debug%E8%AE%B0%E5%BD%95/%E4%B8%80%E4%B8%AA%EF%BC%8A%E5%BC%95%E5%8F%91%E7%9A%84%E6%83%A8%E6%A1%88.html","title":"一个＊引发的惨案","lang":"zh-CN","frontmatter":{"category":["blog"],"date":"2024-10-01T00:00:00.000Z","isOriginal":true,"tags":["Linux","debug/记录"],"title":"一个＊引发的惨案","description":"背景 最近，我正在部署我自己的博客，因为使用的是obsidian，所以为了过滤隐私文件/转换wiki链接，我自己写了个Python程序来转换。 因为使用的Vuepress需要把图片文件放在Public文件夹下面，所以还写了个程序，用来把图片文件转移到.vuepress/public文件夹下。 本地运行，很完美，效果都实现了。要不部署看看吧。然后，.vu...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一个＊引发的惨案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-10-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-08T00:59:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"耳朵同\\",\\"url\\":\\"http://blog.erduotong.com\\",\\"email\\":\\"erduotong@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://blog.erduotong.com/40%20Archive/%E5%8D%9A%E5%AE%A2/%E8%AE%A1%E7%AE%97%E6%9C%BA/debug%E8%AE%B0%E5%BD%95/%E4%B8%80%E4%B8%AA%EF%BC%8A%E5%BC%95%E5%8F%91%E7%9A%84%E6%83%A8%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"耳朵同的博客"}],["meta",{"property":"og:title","content":"一个＊引发的惨案"}],["meta",{"property":"og:description","content":"背景 最近，我正在部署我自己的博客，因为使用的是obsidian，所以为了过滤隐私文件/转换wiki链接，我自己写了个Python程序来转换。 因为使用的Vuepress需要把图片文件放在Public文件夹下面，所以还写了个程序，用来把图片文件转移到.vuepress/public文件夹下。 本地运行，很完美，效果都实现了。要不部署看看吧。然后，.vu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T00:59:20.000Z"}],["meta",{"property":"article:tag","content":"debug/记录"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2024-10-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-08T00:59:20.000Z"}]]},"git":{"createdTime":1754614760000,"updatedTime":1754614760000,"contributors":[{"name":"github-actions[bot]","username":"","email":"github-actions[bot]@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.09,"words":627},"filePathRelative":"40 Archive/博客/计算机/debug记录/一个＊引发的惨案.md","excerpt":"<hr>\\n<h1>背景</h1>\\n<p>最近，我正在部署我自己的博客，因为使用的是obsidian，所以为了过滤隐私文件/转换wiki链接，我自己写了个Python程序来转换。</p>\\n<p>因为使用的Vuepress需要把图片文件放在Public文件夹下面，所以还写了个程序，用来把图片文件转移到<code>.vuepress/public</code>文件夹下。</p>\\n<p>本地运行，很完美，效果都实现了。要不部署看看吧。然后，<code>.vuepress</code>就不知道去哪了</p>\\n<h1>开始Debug——怀疑Linux的问题</h1>\\n<p>介于以前就因为Github Action就出现过因Linux的路径问题导致的BUG，所以先给所有的路径都加上一个<code>os.path.normpath</code>，希望能实现。</p>","autoDesc":true,"bioChainData":{"outlink":[],"backlink":[{"title":"我的博客发布流程","link":"40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.html"}],"localMap":{"nodes":[{"id":"40 Archive/博客/计算机/debug记录/一个＊引发的惨案.md","value":{"title":"一个＊引发的惨案","path":"40 Archive/博客/计算机/debug记录/一个＊引发的惨案.md","outlink":[],"backlink":["40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.md"]},"linkCount":0},{"id":"40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.md","value":{"title":"我的博客发布流程","path":"40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.md","outlink":[],"backlink":["40 Archive/博客/年终总结/2024 年终总结.md"]},"linkCount":0},{"id":"40 Archive/博客/年终总结/2024 年终总结.md","value":{"title":"2024 年终总结","path":"40 Archive/博客/年终总结/2024 年终总结.md","outlink":[],"backlink":[]},"linkCount":0}],"links":[{"source":"40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.md","target":"40 Archive/博客/计算机/debug记录/一个＊引发的惨案.md"},{"source":"40 Archive/博客/年终总结/2024 年终总结.md","target":"40 Archive/博客/计算机/博客折腾记录/我的博客发布流程.md"}]}}}');export{r as comp,d as data};
